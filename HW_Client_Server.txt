HW
Client_Server
1) Прочиать про клиент-серверную архитектуру

* Клиент-серверная архитектура - это такая архитектура в которой сетевая нагрузка распределяется
между постовщиками услуг, которые называются СЕРВЕРЫ и заказчиками услуг, который называются
КЛИЕНТАМИ.
* Самый распространенный пример клиента - браузер.
* Тонкий клиент - это браузер, потому что вся логика, все вычеслительные мощности расположены на
СЕРВЕРЕ, а клиент это простое ПО, которое только отправляет запросы.
* Толстый клиент - это приложение, которое обеспечивает расширенную функциональность не зависимо
от сервера. Часто сервер является лишь хранилищем данных, а свя обработка данных идет на КЛИЕНТЕ.
Например: 1С-Бухгалтерия (вся логика ведется на КЛИЕНТЕ), все он-лайн игры. 

* Клиент + Сервер = двухуровневая архитектура.
* Клиент + Сервер + База данных = трехуровневая архитектура.

* Все данные  могут хранится на сервере, но когда она есть, мы уверены в сохранности данных и 
легко можем по ним поискать.

* Плюсы архитектуры:
	- выгоднее содержать 1 мощный сервер, чем 100 мощных клинетских машин и хранить 
	  информацию на них;
	- нет дублирования кода, весь код хранится на сервере;
	- персональные данные пользователей в безопасноти на сервере.
* Минусы архитектуры:
	- упал сервер или база данных - ничего не работает.

* В высоконагруженных приложениях между клиентом и сервером может стоять балансировщик, который 
распределяет запросы между несколькими серверами в зависимости от их загруженности.
* Несколько серверов в одной архитектуре - это кластер.
* Горячий резерв - когда два сервера работают в параллель.
* Холодный резерв - когда балансировщик направляет все запросы на один сервер, а второй сервер 
отдыхает. Если с первым что-то случилось, то запросы идут на второй (резервный) сервер.


2) Что ткое HTTP и HTTPS
* Протокол - набор правил передачи информации. С помощью протоколов регламентируется то, как
будет передаваться информация в сети Интернет.

* HTTP (HyperText Transfer Protocol) ― это протокол передачи гипертекста. С его помощью браузер 
получает информацию от сервера и показывает пользователю контент. 
Это первый протокол, который создали для работы в веб-пространстве.

* HTTPS (HyperText Transfer Protocol Secure) ― защищённый протокол передачи данных в интернете. 
Это тот же протокол HTTP, но защищенный протоколалми SSL и TLS.

* Отличия HTTP от HTTPS:
- протокол HTTP не обеспечивает защиту передаваемых данных;
- HTTP работает по порту 80, а HTTPS ― по порту 443;
- сайты с этими протоколами по-разному отображаются в поисковых системах: большее доверие к 
HTTPS и эти сайты выше в поисковой выдаче.

*Версии HTTP:
	- 0.9 самая первая;
	- 1.1 самая распространенная;
	- 2.0 самая современная.

3) HTTP методы
* HTTP-request    запрос на сервер;
  HTTP-response   ответ сервера;

* HTTP запрос состоит из трех основных частей: 
	- request line (строка запроса) здесь указывается метод передачи, версия протокола HTTP
	                                и URL, к которому должен обратиться сервер;
	- message header (заголовок) содержат тело сообщения, передаваемые параметры 
                                     и другие сведения;
	- entity body (тело сообщения) здесь могут находиться передаваемые в запросе данные.
				       Не обязательный параметр.
GET - запрос информации от сервера. Доступен для кеширования данных и добавления в закладки.
      макс. длина URL - 2048. Клиент может передавать параметры выполнения запроса в URI 
      целевого ресурса после символа «?». GET - идемпотентный.
POST - передача пользовательских данных на сервер. Например, в блогах посетители
       обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются 
       серверу методом POST и он помещает их на страницу. При этом передаваемые данные 
       (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с 
       помощью метода POST обычно загружаются файлы на сервер. POST - не идемпотентный.
OPTIONS - используется для определения возможностей веб-сервера или параметров соединения
          для конкретного ресурса.Для того, чтобы узнать возможности всего сервера, 
          клиент должен указать в URI звёздочку — «*». Запросы «OPTIONS * HTTP/1.1» могут
          также применяться для проверки работоспособности сервера (аналогично «пингованию») 
          и тестирования на предмет поддержки сервером протокола HTTP версии 1.1.
PUT - изменение уже имеющейся информации на сервере.
HEAD - аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. 
       запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса 
       (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
DELETE - удаляет указанный ресурс.
PATCH - подходит для обновления ресурсов.
TRACE - возвращает полученный запрос так, что клиент может увидеть, какую информацию 
        промежуточные серверы добавляют или изменяют в запросе.
CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы 
         содействовать установлению защищённого SSL-соединения через нешифрованный прокси.





4) HTTP статус коды сервера

В HTTP-response содержится STATUS code и STATUS message.

1xx - информационные;
2xx - сообщения об успехе операции;
3хх - сообщения о перенаправлении на другой сервер;
4хх - ошибка со стороны КЛИЕНТА;
5хх - ошибка со стороны СЕРВЕРА.


5) Что такое ядро браузера 

Ядро браузера - представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML,
                XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах 
                CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на 
                экране.  


6) Какие браузеры какиие ядра используют

Blink — движок браузера Google Chrome, Microsoft Edge, Opera;
Gecko — открытый движок проекта Mozilla;
WebKit — движок для браузера Apple Safari.

7) Что такое API

*API (Application programming interface) - «программный интерфейс приложения». Описание способов
которыми одна компьютерная программа может взаимодействовать с другой программой.
Пример работы API это быстрая регистрация на сайте, через аккаунт google. 

Существует четыре различных способа работы API в зависимости от того, когда и почему они 
были созданы:
	SOAP – Simple Object Access Protocol, т. е. простой протокол доступа к объектам. 
	       Клиент и сервер обмениваются сообщениями посредством XML. Это менее гибкий API,
               который был более популярен в прошлом.
	RPC - такие API называются системой удаленного вызова процедур. Клиент выполняет функцию
              (или процедуру) на сервере, и сервер отправляет результат обратно клиенту.
	Websocket API – это еще одна современная разработка web API, которая использует объекты
               JSON для передачи данных. WebSocket API поддерживает двустороннюю связь между  
               клиентскими приложениями и сервером. Сервер может отправлять сообщения обратного 
               вызова подключенным клиентам, что делает его более эффективным, чем REST API.
	REST API - Representational State Transfer, т. е. передача репрезентативного состояния. 
               REST определяет набор функций, таких как GET, PUT, DELETE и т. д., которые 
               клиенты могут использовать для доступа к данным сервера. Клиенты и серверы 
               обмениваются данными по протоколу HTTP.


8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов